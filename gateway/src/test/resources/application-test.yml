uri:
  my:
    host: 'localhost:8080'
  auth:
    server:
      host: 'localhost:8080'
      login-path: '/login'
      token-path: '/oauth/token'
      favicon-path: '/favicon.ico'
  file:
    list:
      host: 'http://${uri.my.host}'
      path: '/api/file/list'
    upload:
      host: "http://${uri.my.host}"
      path: '/api/file/upload'
    download:
      host: 'http://${uri.my.host}'
      path: '/api/file/download'
  redirect:
    default:
      host: 'http://${uri.my.host}'
      path: '/'


spring:
  security:
    oauth2:
      client:
        provider:
          azon-minio-auth-server:
            token-uri: 'http://${uri.auth.server.host}${uri.auth.server.token-path}'
            authorization-uri: 'http://${uri.auth.server.host}/oauth/authorize'
            jwkSetUri: 'http://${uri.auth.server.host}/.well-known/jwks.json'
        registration:
          gateway:
            provider: 'azon-minio-auth-server'
            client-id: 'gateway'
            client-secret: 'secret'
            authorization-grant-type: 'authorization_code'
            redirect-uri: 'http://${uri.my.host}${uri.auth.server.token-path}'
    cloud:
      gateway:
        routes:
          # Application routes
          - id: 'get_file_list'
            uri: '${uri.file.list.host}${uri.file.list.path}'
            predicates:
              - Path=${uri.file.list.path}
            filters:
              - RemoveRequestHeader=Cookie
          - id: 'file_upload'
            uri: '${uri.file.upload.host}${uri.file.upload.path}'
            predicates:
              - Path=${uri.file.upload.path}
            filters:
              - RemoveRequestHeader=Cookie
          - id: 'file_download'
            uri: '${uri.file.download.host}${uri.file.download.path}'
            predicates:
              - Path=${uri.file.download.path}
            filters:
              - RemoveRequestHeader=Cookie

          # Authorization routes
          - id: 'auth_server_user_authentication'
            uri: 'http://${uri.auth.server.host}${uri.auth.server.login-path}'
            predicates:
              - Path=${uri.auth.server.login-path}
            filters:
              - RewriteLocationResponseHeader
          #        - id: 'auth-server-client-authorization'
          #          uri: 'http://${AUTH_SERVER_HOST}/oauth/authorize'
          #          predicates:
          #            - Path=/oauth/authorize
          - id: 'auth_server_authorization_code'
            uri: 'http://${uri.auth.server.host}${uri.auth.server.token-path}'
            predicates:
              - Path=${uri.auth.server.token-path}
          - id: 'default_uri'
            uri: '${uri.redirect.default.host}${uri.redirect.default.path}'
            predicates:
              - Path=${uri.redirect.default.path}
          - id: 'favicon'
            uri: 'http://${uri.auth.server.host}/favicon.ico'
            predicates:
              - Path=${uri.auth.server.favicon-path}

